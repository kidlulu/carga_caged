rm(list=ls(all=TRUE))
gc()
setwd('C:/Users/35866/AppData/Local/Temp')
library(RODBC)
library(tidyverse)
download.file('ftp://ftp.mtps.gov.br/pdet/microdados/NOVO%20CAGED/2020/202002/CAGEDFOR202002.7z','for.7z', mode="wb")
download.file('ftp://ftp.mtps.gov.br/pdet/microdados/NOVO%20CAGED/2020/202002/CAGEDFOR202002.7z','for.7z', mode="wb")
system('"c:/Program Files/7-Zip/7z.exe" e -y for.7z')
mov <- data.table::fread(file = 'CAGEDFOR202002.txt',
encoding = if_else(readr::guess_encoding('CAGEDFOR202002.txt')[[1,1]]=="ISO-8859-1",'Latin-1','UTF-8'))
View(mov)
rm(list=ls(all=TRUE))
gc()
setwd('C:/Users/35866/AppData/Local/Temp')
library(RODBC)
library(tidyverse)
download.file('ftp://ftp.mtps.gov.br/pdet/microdados/NOVO%20CAGED/2020/202002/CAGEDFOR202002.7z','for.7z', mode="wb")
system('"c:/Program Files/7-Zip/7z.exe" e -y for.7z')
mov <- data.table::fread(file = 'CAGEDFOR202002.txt',
encoding = if_else(readr::guess_encoding('CAGEDFOR202002.txt')[[1,1]]=="ISO-8859-1",'Latin-1','UTF-8')) %>%
dplyr::rename_all(list(~c("competencia","regiao","uf","municipio","secao","subclasse","saldo","cbo2002ocupacao","categoria","graudeinstrucao","idade",
"horascontratuais","racacor","sexo","tipoempregador","tipoestabelecimento","tipomovimentacao","tipodedeficiencia","indtrabintermitente",
"indtrabparcial","salario","tamestabjan","indicadoraprendiz","origemdainformacao","competenciadec","indicadordeforadoprazo",
"unidadesalariocodigo","valorsalariofixo")))
x <- data.frame(type=sapply(mov, class),
nc=unlist(lapply(mov, function(x) max(nchar(x), na.rm = T))),
tm=as.numeric(unlist(lapply(mov, function(x) max(x, na.rm = T))))) %>%
# Ajustar os casos em que todas as colunas s?o vazias
dplyr::mutate(nc=ifelse(nc==-Inf,2,nc),
# Determinar o tamanho dos campos VARCHAR e fazer o de para dos demais campos
coltype=case_when(type=="character"~paste0("VARCHAR(",nc,")"),
type=="numeric"~'float',
type %in% c("integer","integer64")~"bigint",
TRUE~'VARCHAR(1)'),
coltype=case_when(type=="integer" & tm >= -2^31 & tm <= 2^31-1~"int",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= -2^15 & tm <= 2^15-1~"smallint",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= 0 & tm <= 255~"smallint",
TRUE~coltype))
columnTypes <- setNames(as.list(x$coltype),names(mov))
db <- RODBC::odbcConnect("db_codeplan",uid=Sys.getenv("usuario"),pwd=Sys.getenv("senha"))
RODBC::sqlQuery(db,"IF OBJECT_ID('caged.tmp', 'U') IS NOT NULL DROP TABLE caged.tmp")
source("D:/Users/35866/Documents/codeplan/analise_caged/carga_caged/carga_caged_des_EXC.R", echo=TRUE)
rm(list=ls(all=TRUE))
gc()
setwd('D:/Users/35866/Documents/codeplan/analise_caged/carga_caged')
library(RODBC)
library(tidyverse)
rm(list=ls(all=TRUE))
gc()
setwd('D:/Users/35866/Documents/codeplan/analise_caged/carga_caged')
library(RODBC)
library(tidyverse)
dic <- data.table::fread(file = 'Layout Não-identificado Novo Caged Movimentação.txt',
encoding = if_else(readr::guess_encoding('Layout Não-identificado Novo Caged Movimentação.txt')[[1,1]]=="ISO-8859-1",'Latin-1','UTF-8'))
x <- data.frame(type=sapply(dic, class),
nc=unlist(lapply(dic, function(x) max(nchar(x), na.rm = T))),
tm=as.numeric(unlist(lapply(dic, function(x) max(x, na.rm = T))))) %>%
# Ajustar os casos em que todas as colunas s?o vazias
dplyr::mutate(nc=ifelse(nc==-Inf,2,nc),
# Determinar o tamanho dos campos VARCHAR e fazer o de para dos demais campos
coltype=case_when(type=="character"~paste0("VARCHAR(",nc,")"),
type=="numeric"~'float',
type %in% c("integer","integer64")~"bigint",
TRUE~'VARCHAR(1)'),
coltype=case_when(type=="integer" & tm >= -2^31 & tm <= 2^31-1~"int",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= -2^15 & tm <= 2^15-1~"smallint",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= 0 & tm <= 255~"smallint",
TRUE~coltype))
columnTypes <- setNames(as.list(x$coltype),names(dic))
db <- RODBC::odbcConnect("db_codeplan",uid=Sys.getenv("usuario"),pwd=Sys.getenv("senha"))
RODBC::sqlQuery(db,"IF OBJECT_ID('caged.caged_202001_atual_DIC', 'U') IS NOT NULL DROP TABLE caged.caged_202001_atual_DIC")
RODBC::sqlSave(db,dic,'caged.caged_202001_atual_DIC',rownames = F,append = T,varTypes = columnTypes)
rm(list=ls(all=TRUE))
gc()
setwd('D:/Users/35866/Documents/codeplan/analise_caged/carga_caged')
library(RODBC)
library(tidyverse)
dic <- data.table::fread(file = 'Layout Não-identificado Novo Caged Movimentação.txt',
encoding = if_else(readr::guess_encoding('Layout Não-identificado Novo Caged Movimentação.txt')[[1,1]]=="ISO-8859-1",'Latin-1','UTF-8'))
x <- data.frame(type=sapply(dic, class),
nc=unlist(lapply(dic, function(x) max(nchar(x), na.rm = T))),
tm=as.numeric(unlist(lapply(dic, function(x) max(x, na.rm = T))))) %>%
# Ajustar os casos em que todas as colunas s?o vazias
dplyr::mutate(nc=ifelse(nc==-Inf,2,nc),
# Determinar o tamanho dos campos VARCHAR e fazer o de para dos demais campos
coltype=case_when(type=="character"~paste0("VARCHAR(",nc,")"),
type=="numeric"~'float',
type %in% c("integer","integer64")~"bigint",
TRUE~'VARCHAR(1)'),
coltype=case_when(type=="integer" & tm >= -2^31 & tm <= 2^31-1~"int",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= -2^15 & tm <= 2^15-1~"smallint",
TRUE~coltype),
coltype=case_when(type=="integer" & tm >= 0 & tm <= 255~"smallint",
TRUE~coltype))
columnTypes <- setNames(as.list(x$coltype),names(dic))
db <- RODBC::odbcConnect("db_codeplan",uid=Sys.getenv("usuario"),pwd=Sys.getenv("senha"))
RODBC::sqlQuery(db,"IF OBJECT_ID('caged.caged_202001_atual_DIC', 'U') IS NOT NULL DROP TABLE caged.caged_202001_atual_DIC")
RODBC::sqlSave(db,dic,'caged.caged_202001_atual_DIC',rownames = T,append = T,varTypes = columnTypes)
